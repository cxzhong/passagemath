name: Prepare source distributions and wheels

on:
  pull_request:
  merge_group:
  push:
    tags:
      # Match all release tags including beta, rc
      - 'passagemath-[0-9]+.[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.beta[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.[0-9]+.beta[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.rc[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.[0-9]+.rc[0-9]+'

  workflow_dispatch:
    # Allow to run manually

concurrency:
  # Cancel previous runs of this workflow for the same branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  release_dist:

    # This job first checks whether "configure --enable-download-from-upstream-url"
    # (the default since #32390) is needed.
    #
    # In this way, we check that all necessary package tarballs
    # have already been uploaded to the Sage server at the time
    # of pushing a release tag.
    #
    # It also uses "bootstrap -D", thus checking that the "configure"
    # tarball has been uploaded to the Sage server at the time
    # of pushing a release tag.

    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install bootstrap prerequisites
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install $(build/bin/sage-get-system-packages debian _bootstrap)
      - name: bootstrap -D
        run: |
          ./bootstrap -D
      - name: bootstrap
        if: failure()
        run: |
          ./bootstrap
      - name: make dist (--disable-download-from-upstream-url)
        if: (success() || failure())
        id: make_dist
        run: |
          ./configure --disable-download-from-upstream-url && make dist
        env:
          MAKE: make -j8
      - name: make download (--disable-download-from-upstream-url)
        if: (success() || failure())
        id: make_download
        run: |
          make -k download DOWNLOAD_PACKAGES=":all: --no-file huge"
        env:
          MAKE: make -j8
      - name: Reconfigure with --enable-download-from-upstream-url
        if: (success() || failure()) && (steps.make_dist.outcome != 'success' || steps.make_download.outcome != 'success')
        run: |
          ./configure
      - name: make dist (--enable-download-from-upstream-url)
        if: (success() || failure()) && steps.make_dist.outcome != 'success'
        run: |
          make dist
        env:
          MAKE: make -j8
      - name: make download (--enable-download-from-upstream-url)
        if: (success() || failure()) && steps.make_download.outcome != 'success'
        run: |
          make -k download DOWNLOAD_PACKAGES=":all: --no-file huge --allow-upstream --on-error warn"
        env:
          MAKE: make -j8
      - name: Remove what cannot be distributed
        if: success() || failure()
        run: |
          rm -f upstream/*do-not-distribute*
      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          path: |
            dist/*.tar.gz
            upstream
          name: release_dist

  sdists_for_pypi:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install bootstrap prerequisites
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install $(build/bin/sage-get-system-packages debian _bootstrap)
      - name: Cache SAGE_LOCAL
        uses: actions/cache@v4
        with:
          path: |
            config.status
            local
          key: sdists_for_pypi
      - name: make pypi-sdists
        run: |
          ./bootstrap
          if [ -x ./config.status ]; then ./config.status; else ./configure; fi
          make pypi-sdists V=0
          (mkdir dist && mv upstream/*sage*.tar.gz dist/)
          ls -l dist
      - uses: actions/upload-artifact@v4
        with:
          path: "dist/*.tar.gz"
          name: dist
      - name: twine check
        run: |
          ./sage -pip install twine
          ./sage -sh -c 'twine check dist/*.tar.gz'

  release:

    needs: [release_dist, sdists_for_pypi]
    runs-on: ubuntu-latest
    if: (success() || failure()) && github.repository == 'passagemath/passagemath' && startsWith(github.ref, 'refs/tags/passagemath-')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release_dist
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          files: |
            dist/*
            upstream/*
    permissions:
      contents: write

  noarch_wheels_for_pypi:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install bootstrap prerequisites
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install $(build/bin/sage-get-system-packages debian _bootstrap)
      - name: make pypi-noarch-wheels
        run: |
          ./bootstrap
          ./configure
          make pypi-noarch-wheels V=0
          (mkdir dist && mv venv/var/lib/sage/wheels/*sage*-none-any.whl dist/)
          ls -l dist
      - uses: actions/upload-artifact@v4
        with:
          path: "dist/*.whl"
          name: noarch-wheels

  build_wheels:
    name: wheels ${{ matrix.build }}*_${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs: [sdists_for_pypi, noarch_wheels_for_pypi]
    strategy:
      fail-fast: false
      matrix:
        os:      [ubuntu-latest]
        arch: >-
          ${{ github.event_name == 'pull_request'
                && fromJson('["x86_64"]')
                || fromJson('["x86_64", "i686"]') }}
        build: >-
          ${{ github.event_name == 'pull_request'
                && fromJson('["manylinux"]')
                || fromJson('["manylinux", "musllinux"]') }}
        include:
          - os: macos-13
            arch: x86_64
            build: macosx
          - os: macos-14
            arch: arm64
            build: macosx
    env:
      # SPKGs to install as system packages
      SPKGS: _bootstrap _prereq openssl curl readline liblzma libffi bzip2 zlib info libxml2 gdbm ${{ startsWith(matrix.os, 'macos') && 'gfortran' || '' }}
      # Non-Python packages to install as spkgs
      TARGETS_PRE: ccache libpng gmp mpfr mpc boost_cropped brial cliquer giac glpk libhomfly gsl pari ntl flint linbox iml lcalc libbraiding m4ri m4rie planarity rw symmetrica singular eclib gap ecl maxima libgd  cddlib  palp nauty gfan sympow elliptic_curves ecm pip
      CIBW_BUILD: "*${{ matrix.build }}*"
      # Disable building PyPy wheels on all platforms
      CIBW_SKIP: "pp*"
      #
      CIBW_ARCHS: ${{ matrix.arch }}
      # https://cibuildwheel.readthedocs.io/en/stable/options/#requires-python
      CIBW_PROJECT_REQUIRES_PYTHON: ${{ github.event_name == 'pull_request' && '>=3.9, <3.11' || '>=3.9, <3.13' }}
      # Run before wheel build
      CIBW_BEFORE_BUILD: |
        (echo "passagemath-conf @ file://$(pwd)/pkgs/sage-conf" && echo "passagemath-setup @ file://$(pwd)/pkgs/sage-setup" && echo "cysignals ==1.12.0rc2") > constraints.txt
      # Environment during wheel build
      CIBW_ENVIRONMENT: "PATH=$(pwd)/prefix/bin:$PATH CPATH=$(pwd)/prefix/include:$CPATH LIBRARY_PATH=$(pwd)/prefix/lib:$LIBRARY_PATH PKG_CONFIG_PATH=$(pwd)/prefix/lib/pkgconfig:$PKG_CONFIG_PATH ACLOCAL_PATH=/usr/share/aclocal LINBOX_CONFIGURE=--without-ntl GIAC_CONFIGURE=--disable-ntl SINGULAR_CONFIGURE=--disable-omalloc PIP_CONSTRAINT=$(pwd)/constraints.txt PIP_FIND_LINKS=file://$(pwd)/wheelhouse' 'file://$(pwd)/dist SAGE_NUM_THREADS=6 ${{ startsWith(matrix.os, 'macos') && 'FC=gfortran-14 LDFLAGS=\"-Wl,-ld_classic -Wl,-headerpad_max_install_names $LDFLAGS\"' || '' }}"
      # Use 'build', not 'pip wheel'
      CIBW_BUILD_FRONTEND: build
      # Without setting LD_LIBRARY_PATH, we get Cannot repair wheel, because required library "libm4ri-0.0.20200125.so" could not be located
      CIBW_REPAIR_WHEEL_COMMAND_LINUX: "set -x && export LD_LIBRARY_PATH=$(pwd)/prefix/lib:$LD_LIBRARY_PATH && pkg=$(basename {wheel}) && pkg=${pkg%%-*} && pkg=${pkg//_/-} && pkg=${pkg#pas} && if [ -r pkgs/$pkg/repair_wheel.py ]; then python3 -m pip install passagemath-conf && python3 pkgs/$pkg/repair_wheel.py {wheel}; fi && auditwheel repair -w {dest_dir} {wheel}"
      # to avoid "DelocationError: Library dependencies do not satisfy target MacOS version 10.9"
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-13' && '13.0' || '14.0' }}
      # Avoid onetbb build failure on manylinux2014 (https://github.com/passagemath/passagemath/issues/460)
      # manylinux_2_28 will be default from May 2025 - https://cibuildwheel.pypa.io/en/stable/options/#linux-image
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
    steps:
      - name: Maximize build disk space
        if: runner.os == 'Linux'
        uses: easimon/maximize-build-space@v10
        with:
          # need space in /var for Docker images
          root-reserve-mb:      30000
          remove-dotnet:        true
          remove-android:       true
          remove-haskell:       true
          remove-codeql:        true
          remove-docker-images: true

      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux' && matrix.arch != 'x86_64' && matrix.arch != 'i686'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Download sdists
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Download noarch-wheels
        uses: actions/download-artifact@v4
        with:
          name: noarch-wheels
          path: dist

      - uses: actions/setup-python@v5
        # As of 2024-02-03, the macOS M1 runners do not have preinstalled python or pipx.
        # Installing pipx follows the approach of https://github.com/pypa/cibuildwheel/pull/1743
        id: python
        with:
          python-version: "3.8 - 3.12"
          update-environment: false

      - name: Bootstrap
        run: |
          export PATH=$(pwd)/build/bin:$PATH
          eval $(sage-print-system-package-command auto --sudo --yes --no-install-recommends --spkg install _bootstrap bzip2 xz liblzma)
          ./bootstrap

      - name: Cache SAGE_LOCAL
        id:   cache-sage-local
        uses: actions/cache/restore@v4
        with:
          path: |
            /sage-*
            ~/sage-*
          key: ${{ runner.os }}-cibuildwheel-${{ matrix.arch }}-${{ matrix.build }}

      - name: Unpack and prepare
        # We build the wheels from the sdists so that MANIFEST filtering becomes effective.
        # But we must run cibuildwheel with the unpacked source directory, not a tarball,
        # so that SAGE_ROOT is copied into the build containers.
        #
        # In the CIBW_BEFORE_ALL phase, we install libraries using the Sage distribution.
        # https://cibuildwheel.readthedocs.io/en/stable/options/#before-all
        # For Linux, this is repeated for each of the packages that we build wheels for
        # because CIBW starts with a fresh container on each invocation.
        # Therefore we cache it in a directory mounted from the host: /host
        # https://cibuildwheel.pypa.io/en/stable/faq/#linux-builds-in-containers
        #
        # - configure --with-sage-venv makes the SAGE_VENV separate from SAGE_LOCAL.
        #   SAGE_LOCAL is put in PATH for the wheel building.
        #   SAGE_VENV must not be in PATH so it does not shadow cibuildwheel's build tools.
        #
        run: |
          "${{ steps.python.outputs.python-path }}" -m pip install setuptools
          . ./.homebrew-build-env 2> /dev/null || :
          ./configure --with-python="${{ steps.python.outputs.python-path }}" --with-system-python3=force --prefix=$HOME/runner-venv
          make cibuildwheel
          export PATH=build/bin:$PATH
          echo CIBW_BEFORE_ALL="echo > constraints.txt && ( $(sage-print-system-package-command debian --yes --no-install-recommends install $(sage-get-system-packages debian $SPKGS) zip) || $(sage-print-system-package-command fedora --yes --no-install-recommends install $(sage-get-system-packages fedora $SPKGS | sed s/pkg-config/pkgconfig/) zip) || ( $(sage-print-system-package-command homebrew --yes --no-install-recommends install $(sage-get-system-packages homebrew $SPKGS)) || $(sage-print-system-package-command alpine --yes --no-install-recommends install $(sage-get-system-packages alpine $SPKGS) zip) || echo error ignored) ) && rm -f config.status && PREFIX=${{ startsWith(matrix.os, 'ubuntu') && '/host/sage-\$AUDITWHEEL_PLAT' || '\$HOME/sage-local' }} && if cp \$PREFIX/config.status . 2>/dev/null; then chmod +x config.status; fi && if [ -x ./config.status ]; then ./config.status; else ./configure --enable-build-as-root --prefix=\$PREFIX --with-sage-venv --with-system-gfortran=force --without-system-libpng && cat config.log && cp config.status prefix/ && (MAKE=\"make -j6\" make -k V=0 $TARGETS_PRE || echo error ignored); fi && rm -rf prefix/lib/gap/pkg/{transgrp/data,ctbllib/data,tomlib/data,irredsol/data} prefix/share/gap/doc && for a in \$(find prefix/lib -type f -name 'lib*'); do case \$a in *flint*|*gf2x*|*gmp*|*gsl*|*mpfr*|*ntl*|*openblas*) strip \$a;; esac; done" >> "$GITHUB_ENV"
          mkdir -p unpacked
          for sdist in dist/$pkg*.tar.gz; do
              (cd unpacked && tar xfz - ) < $sdist
          done

      - name: sagemath-objects
        id:   sagemath-objects
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*objects*

      - name: Save SAGE_LOCAL cache
        uses: actions/cache/save@v4
        with:
          path: |
            /sage-*
            ~/sage-*
          key: ${{ steps.cache-sage-local.outputs.cache-primary-key }}

        ####### sagemath-categories and what depends on it

      - name: sagemath-categories
        id:   sagemath-categories
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*categories*

      - name: sagemath-brial
        id:   sagemath-brial
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*brial*

      - name: sagemath-giac
        id:   sagemath-giac
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*giac*

      - name: sagemath-glpk
        id:   sagemath-glpk
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*glpk*

      - name: sagemath-homfly
        id:   sagemath-homfly
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*homfly*

      - name: sagemath-combinat
        id:   sagemath-combinat
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*combinat*

      - name: sagemath-graphs
        id:   sagemath-graphs
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*graphs*

      - name: sagemath-planarity
        id:   sagemath-planarity
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*planarity*

      - name: sagemath-rankwidth
        id:   sagemath-rankwidth
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*rankwidth*

        ####### sagemath-modules and what depends on it

      - name: sagemath-modules
        id:   sagemath-modules
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*modules*

      - name: sagemath-plot
        id:   sagemath-plot
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*plot*

      - name: sagemath-polyhedra
        id:   sagemath-polyhedra
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*polyhedra*

      - name: sagemath-ntl
        id:   sagemath-ntl
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*ntl*

      - name: sagemath-flint
        id:   sagemath-flint
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*flint*

      - name: sagemath-pari
        id:   sagemath-pari
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*pari*

      - name: sagemath-cddlib
        id:   sagemath-cddlib
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*cddlib*

      - name: sagemath-gfan
        id:   sagemath-gfan
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*gfan*

      - name: sagemath-palp
        id:   sagemath-palp
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*palp*

      - name: sagemath-nauty
        id:   sagemath-nauty
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*nauty*

      - name: sagemath-linbox
        id:   sagemath-linbox
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*linbox*

      - name: sagemath-libecm
        id:   sagemath-libecm
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*libecm*

      - name: sagemath-lcalc
        id:   sagemath-lcalc
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*lcalc*

      - name: sagemath-libbraiding
        id:   sagemath-libbraiding
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*libbraiding*

      - name: sagemath-eclib
        id:   sagemath-eclib
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*eclib*

      - name: sagemath-gap
        id:   sagemath-gap
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*gap*

      - name: sagemath-groups
        id:   sagemath-groups
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*groups*

      - name: sagemath-singular
        id:   sagemath-singular
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*singular*

      - name: sagemath-schemes
        id:   sagemath-schemes
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*schemes*

      - name: sagemath-ecl
        id:   sagemath-ecl
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_ecl-*

      - name: sagemath-maxima
        id:   sagemath-maxima
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_maxima-*

      - name: sagemath-symbolics
        id:   sagemath-symbolics
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_symbolics*

      - name: sagemath-sympow
        id:   sagemath-sympow
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_sympow*

      - name: sagemath-standard-no-symbolics
        id:   sagemath-standard-no-symbolics
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*standard*no*symbolics*

      - name: sagemath-cliquer
        id:   sagemath-cliquer
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_cliquer*


      - uses: actions/upload-artifact@v4
        if:   always()
        with:
          name: ${{ matrix.os }}-${{ matrix.build }}-${{ matrix.arch }}-wheels
          path: ./wheelhouse/*.whl

  build_optional_wheels:
    name: wheels ${{ matrix.build }}*_${{ matrix.arch }} optional
    if: (success() || failure())
    runs-on: ${{ matrix.os }}
    needs: [sdists_for_pypi, noarch_wheels_for_pypi, build_wheels]
    strategy:
      fail-fast: false
      matrix:
        os:      [ubuntu-latest]
        arch: >-
          ${{ github.event_name == 'pull_request'
                && fromJson('["x86_64"]')
                || fromJson('["x86_64", "i686"]') }}
        build: >-
          ${{ github.event_name == 'pull_request'
                && fromJson('["manylinux"]')
                || fromJson('["manylinux", "musllinux"]') }}
        include:
          - os: macos-13
            arch: x86_64
            build: macosx
          - os: macos-14
            arch: arm64
            build: macosx
    env:
      # SPKGs to install as system packages
      SPKGS: _bootstrap _prereq openssl curl readline liblzma libffi bzip2 zlib info libxml2 gdbm ${{ startsWith(matrix.os, 'macos') && 'gfortran' || '' }}
      # Non-Python packages to install as spkgs
      TARGETS_PRE: ccache libpng gmp mpfr mpc bliss coxeter3 mcqd meataxe sirocco tdlib msolve cddlib latte_int 4ti2 topcom qepcad frobby lrslib rubiks plantri buckygen benzene macaulay2 glucose kissat kenzo pip
      CIBW_BUILD: "*${{ matrix.build }}*"
      # Disable building PyPy wheels on all platforms
      CIBW_SKIP: "pp*"
      #
      CIBW_ARCHS: ${{ matrix.arch }}
      # https://cibuildwheel.readthedocs.io/en/stable/options/#requires-python
      CIBW_PROJECT_REQUIRES_PYTHON: ${{ github.event_name == 'pull_request' && '>=3.9, <3.11' || '>=3.9, <3.13' }}
      # Run before wheel build
      CIBW_BEFORE_BUILD: |
        (echo "passagemath-conf @ file://$(pwd)/pkgs/sage-conf" && echo "passagemath-setup @ file://$(pwd)/pkgs/sage-setup" && echo "cysignals ==1.12.0rc2") > constraints.txt
      # Environment during wheel build
      CIBW_ENVIRONMENT: "PATH=$(pwd)/prefix/bin:$PATH CPATH=$(pwd)/prefix/include:$CPATH LIBRARY_PATH=$(pwd)/prefix/lib:$LIBRARY_PATH PKG_CONFIG_PATH=$(pwd)/prefix/lib/pkgconfig:$PKG_CONFIG_PATH ACLOCAL_PATH=/usr/share/aclocal LINBOX_CONFIGURE=--without-ntl GIAC_CONFIGURE=--disable-ntl SINGULAR_CONFIGURE=--disable-omalloc PIP_CONSTRAINT=$(pwd)/constraints.txt PIP_FIND_LINKS=file://$(pwd)/wheelhouse' 'file://$(pwd)/dist SAGE_NUM_THREADS=6 ${{ startsWith(matrix.os, 'macos') && 'FC=gfortran-14 LDFLAGS=\"-Wl,-ld_classic -Wl,-headerpad_max_install_names $LDFLAGS\"' || '' }}"
      # Use 'build', not 'pip wheel'
      CIBW_BUILD_FRONTEND: build
      # Without setting LD_LIBRARY_PATH, we get Cannot repair wheel, because required library "libm4ri-0.0.20200125.so" could not be located
      CIBW_REPAIR_WHEEL_COMMAND_LINUX: "set -x && export LD_LIBRARY_PATH=$(pwd)/prefix/lib:$LD_LIBRARY_PATH && pkg=$(basename {wheel}) && pkg=${pkg%%-*} && pkg=${pkg//_/-} && pkg=${pkg#pas} && if [ -r pkgs/$pkg/repair_wheel.py ]; then python3 -m pip install passagemath-conf && python3 pkgs/$pkg/repair_wheel.py {wheel}; fi && auditwheel repair -w {dest_dir} {wheel}"
      # to avoid "DelocationError: Library dependencies do not satisfy target MacOS version 10.9"
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-13' && '13.0' || '14.0' }}
      # Avoid onetbb build failure on manylinux2014 (https://github.com/passagemath/passagemath/issues/460)
      # manylinux_2_28 will be default from May 2025 - https://cibuildwheel.pypa.io/en/stable/options/#linux-image
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
    steps:
      - name: Maximize build disk space
        if: runner.os == 'Linux'
        uses: easimon/maximize-build-space@v10
        with:
          # need space in /var for Docker images
          root-reserve-mb:      30000
          remove-dotnet:        true
          remove-android:       true
          remove-haskell:       true
          remove-codeql:        true
          remove-docker-images: true

      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux' && matrix.arch != 'x86_64' && matrix.arch != 'i686'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Download sdists
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Download noarch-wheels
        uses: actions/download-artifact@v4
        with:
          name: noarch-wheels
          path: dist

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.build }}-${{ matrix.arch }}-wheels
          path: dist

      - uses: actions/setup-python@v5
        # As of 2024-02-03, the macOS M1 runners do not have preinstalled python or pipx.
        # Installing pipx follows the approach of https://github.com/pypa/cibuildwheel/pull/1743
        id: python
        with:
          python-version: "3.8 - 3.12"
          update-environment: false

      - name: Bootstrap
        run: |
          export PATH=$(pwd)/build/bin:$PATH
          eval $(sage-print-system-package-command auto --sudo --yes --no-install-recommends --spkg install _bootstrap bzip2 xz liblzma)
          ./bootstrap

      - name: Cache SAGE_LOCAL
        id:   cache-sage-local
        uses: actions/cache/restore@v4
        with:
          path: |
            /sage-*
            ~/sage-*
          key: ${{ runner.os }}-cibuildwheel-${{ matrix.arch }}-${{ matrix.build }}

      - name: Unpack and prepare
        # We build the wheels from the sdists so that MANIFEST filtering becomes effective.
        # But we must run cibuildwheel with the unpacked source directory, not a tarball,
        # so that SAGE_ROOT is copied into the build containers.
        #
        # In the CIBW_BEFORE_ALL phase, we install libraries using the Sage distribution.
        # https://cibuildwheel.readthedocs.io/en/stable/options/#before-all
        # For Linux, this is repeated for each of the packages that we build wheels for
        # because CIBW starts with a fresh container on each invocation.
        # Therefore we cache it in a directory mounted from the host: /host
        # https://cibuildwheel.pypa.io/en/stable/faq/#linux-builds-in-containers
        #
        # - configure --with-sage-venv makes the SAGE_VENV separate from SAGE_LOCAL.
        #   SAGE_LOCAL is put in PATH for the wheel building.
        #   SAGE_VENV must not be in PATH so it does not shadow cibuildwheel's build tools.
        #
        run: |
          "${{ steps.python.outputs.python-path }}" -m pip install setuptools
          . ./.homebrew-build-env 2> /dev/null || :
          ./configure --with-python="${{ steps.python.outputs.python-path }}" --with-system-python3=force --prefix=$HOME/runner-venv
          make cibuildwheel
          export PATH=build/bin:$PATH
          rm -f ~/sage-local/config.status /sage-*/config.status  # trigger rebuild
          echo CIBW_BEFORE_ALL="echo > constraints.txt && ( $(sage-print-system-package-command debian --yes --no-install-recommends install $(sage-get-system-packages debian $SPKGS) zip) || $(sage-print-system-package-command fedora --yes --no-install-recommends install $(sage-get-system-packages fedora $SPKGS | sed s/pkg-config/pkgconfig/) zip) || ( $(sage-print-system-package-command homebrew --yes --no-install-recommends install $(sage-get-system-packages homebrew $SPKGS)) || $(sage-print-system-package-command alpine --yes --no-install-recommends install $(sage-get-system-packages alpine $SPKGS) zip) || echo error ignored) ) && rm -f config.status && PREFIX=${{ startsWith(matrix.os, 'ubuntu') && '/host/sage-\$AUDITWHEEL_PLAT' || '\$HOME/sage-local' }} && if cp \$PREFIX/config.status . 2>/dev/null; then chmod +x config.status; fi && if [ -x ./config.status ]; then ./config.status; else ./configure --enable-build-as-root --prefix=\$PREFIX --with-sage-venv --with-system-gfortran=force --without-system-libpng && cat config.log && cp config.status prefix/ && (MAKE=\"make -j6\" make -k V=0 $TARGETS_PRE || echo error ignored); fi && rm -rf prefix/lib/gap/pkg/{transgrp/data,ctbllib/data,tomlib/data,irredsol/data} prefix/share/gap/doc && for a in \$(find prefix/lib -type f -name 'lib*'); do case \$a in *flint*|*gf2x*|*gmp*|*gsl*|*mpfr*|*ntl*|*openblas*) strip \$a;; esac; done" >> "$GITHUB_ENV"
          mkdir -p unpacked
          for sdist in dist/$pkg*.tar.gz; do
              (cd unpacked && tar xfz - ) < $sdist
          done

      - name: sagemath-bliss
        id:   sagemath-bliss
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*bliss*

      - name: sagemath-coxeter3
        id:   sagemath-coxeter3
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*coxeter3*

      - name: sagemath-mcqd
        id:   sagemath-mcqd
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*mcqd*

      - name: sagemath-meataxe
        id:   sagemath-meataxe
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*meataxe*

      - name: sagemath-sirocco
        id:   sagemath-sirocco
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*sirocco*

      - name: sagemath-tdlib
        id:   sagemath-tdlib
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*tdlib*

      - name: sagemath-msolve
        id:   sagemath-msolve
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*msolve*

      - name: sagemath-latte-4ti2
        id:   sagemath-latte-4ti2
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*latte*4ti2*

      - name: sagemath-topcom
        id:   sagemath-topcom
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*topcom*

      - name: sagemath-lrslib
        id:   sagemath-lrslib
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*lrslib*

      - name: sagemath-frobby
        id:   sagemath-frobby
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*frobby*

      - name: sagemath-qepcad
        id:   sagemath-qepcad
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*qepcad*

      - name: sagemath-rubiks
        id:   sagemath-rubiks
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_rubiks*

      - name: sagemath-plantri
        id:   sagemath-plantri
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_plantri*

      - name: sagemath-buckygen
        id:   sagemath-buckygen
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_buckygen*

      - name: sagemath-benzene
        id:   sagemath-benzene
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_benzene*

      - name: sagemath-glucose
        id:   sagemath-glucose
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_glucose*

      - name: sagemath-kissat
        id:   sagemath-kissat
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_kissat*

      - name: sagemath-kenzo
        id:   sagemath-kenzo
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_kenzo*

      - name: sagemath-macaulay2
        id:   sagemath-macaulay2
        if:   (success() || failure())
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_macaulay2*



      - uses: actions/upload-artifact@v4
        if:   always()
        with:
          name: ${{ matrix.os }}-${{ matrix.build }}-${{ matrix.arch }}-optional-wheels
          path: ./wheelhouse/*.whl


  upload_wheels:
    # This needs to be a separate job because pypa/gh-action-pypi-publish cannot run on macOS
    needs: [sdists_for_pypi, noarch_wheels_for_pypi, build_wheels, build_optional_wheels]
    if: (success() || failure()) && startsWith(github.ref, 'refs/tags')

    runs-on: ubuntu-latest
    env:
      CAN_DEPLOY: ${{ secrets.SAGEMATH_PYPI_API_TOKEN != '' }}
    steps:

      - uses: actions/download-artifact@v4
        with:
          pattern: "*-wheels"
          path: wheelhouse
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          pattern: "dist"
          path: wheelhouse
          merge-multiple: true

      - name: Remove wheels that are too large
        run: |
          ls -l wheelhouse
          find wheelhouse -size +96M -delete

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.SAGEMATH_PYPI_API_TOKEN }}
          packages-dir: wheelhouse/
          skip-existing: true
          verbose: true
        if: env.CAN_DEPLOY == 'true'

  tox:
    needs: [sdists_for_pypi, noarch_wheels_for_pypi, build_wheels, build_optional_wheels]
    if: (success() || failure())
    uses: ./.github/workflows/ci-wheels.yml
    with:
      run-id: ${{ github.run_id }}
